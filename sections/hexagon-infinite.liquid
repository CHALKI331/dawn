{% comment %}
  Infinite Pointy-Topped Honeycomb Grid
  - 4 rows of gap-free, tessellated pointy-topped hexagons.
  - Each hexagon is 130px wide × 150px tall, displaying a random product image that links to its product page.
  - Each row is duplicated for seamless infinite horizontal scrolling.
  - All hexagons update via a crossfade transition at a random interval between 5–10 seconds.
{% endcomment %}

{% assign products_array = collections.all.products %}
{% capture product_data_json %}
[
  {% for product in products_array %}
    {
      "url": "{{ product.url | escape }}",
      "image": "{% if product.featured_image %}{{ product.featured_image | img_url: '400x400' }}{% else %}https://via.placeholder.com/400{% endif %}"
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
]
{% endcapture %}

{% assign hexagons_per_row = 12 %}

<div class="hexagon-scroll-container">
  <div class="hexagon-grid">
    {% for row in (0..3) %}
      <div class="hexagon-row row-{{ row }}" data-row="{{ row }}">
        {% for i in (1..hexagons_per_row) %}
          <a href="#" class="hexagon">
            <img src="" alt="Product Image">
          </a>
        {% endfor %}
        {%- comment -%} Duplicate row for seamless scrolling {% endcomment -%}
        {% for i in (1..hexagons_per_row) %}
          <a href="#" class="hexagon">
            <img src="" alt="Product Image">
          </a>
        {% endfor %}
      </div>
    {% endfor %}
  </div>
</div>

<script>
  // Parse product data from Liquid.
  var productData = {{ product_data_json | strip_newlines }};
  
  // Helper: Returns a random product object.
  function getRandomProduct() {
    return productData[Math.floor(Math.random() * productData.length)];
  }
  
  // Function to perform a crossfade update on a given hexagon.
  function crossfadeHexagon(hex) {
    var oldImg = hex.querySelector('img');
    var product = getRandomProduct();
    hex.href = product.url;
    
    // Create new image element.
    var newImg = document.createElement('img');
    newImg.src = product.image;
    newImg.alt = "Product Image";
    newImg.style.position = "absolute";
    newImg.style.top = "0";
    newImg.style.left = "0";
    newImg.style.width = "100%";
    newImg.style.height = "100%";
    newImg.style.objectFit = "cover";
    newImg.style.opacity = 0;
    newImg.style.transition = "opacity 1s ease-in-out";
    
    // Append new image and force reflow.
    hex.appendChild(newImg);
    void newImg.offsetWidth; // Force reflow
    
    // Fade new image in and old image out concurrently.
    newImg.style.opacity = 1;
    oldImg.style.transition = "opacity 1s ease-in-out";
    oldImg.style.opacity = 0;
    
    // After the transition, remove the old image.
    setTimeout(function() {
      if (oldImg.parentNode === hex) {
        hex.removeChild(oldImg);
      }
    }, 1000);
  }
  
  // Schedule crossfade updates on all hexagons at random intervals.
  function scheduleUpdates() {
    var hexagons = document.querySelectorAll('.hexagon');
    hexagons.forEach(function(hex) {
      // Schedule a random delay between 5000ms and 10000ms.
      var delay = Math.floor(Math.random() * 5000) + 5000;
      setTimeout(function() {
        crossfadeHexagon(hex);
        // Reschedule the update for this hexagon.
        scheduleUpdateForHex(hex);
      }, delay);
    });
  }
  
  function scheduleUpdateForHex(hex) {
    var delay = Math.floor(Math.random() * 5000) + 5000;
    setTimeout(function() {
      crossfadeHexagon(hex);
      scheduleUpdateForHex(hex);
    }, delay);
  }
  
  document.addEventListener('DOMContentLoaded', function() {
    // On load, assign random product to each hexagon.
    var hexagons = document.querySelectorAll('.hexagon');
    hexagons.forEach(function(hex) {
      var product = getRandomProduct();
      hex.href = product.url;
      var img = hex.querySelector('img');
      if (img) {
        img.src = product.image;
      }
      // Ensure initial opacity is set.
      hex.querySelector('img').style.opacity = 1;
    });
    // Start scheduling updates for each hexagon.
    scheduleUpdates();
  });
</script>

{% schema %}
{
  "name": "InfHexRandom",
  "settings": [],
  "presets": [
    {
      "name": "InfHexRandom",
      "category": "Custom"
    }
  ]
}
{% endschema %}
